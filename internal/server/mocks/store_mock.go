// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dilly3/houdini/internal/repository (interfaces: IRepository)
//
// Generated by this command:
//
//	mockgen -destination=internal/server/mocks/store_mock.go -package=mocks github.com/dilly3/houdini/internal/repository IRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/dilly3/houdini/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// DeleteByDate mocks base method.
func (m *MockIRepository) DeleteByDate(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByDate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByDate indicates an expected call of DeleteByDate.
func (mr *MockIRepositoryMockRecorder) DeleteByDate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByDate", reflect.TypeOf((*MockIRepository)(nil).DeleteByDate), arg0, arg1, arg2)
}

// GetCommitByID mocks base method.
func (m *MockIRepository) GetCommitByID(arg0 context.Context, arg1 string) (*model.CommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitByID", arg0, arg1)
	ret0, _ := ret[0].(*model.CommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitByID indicates an expected call of GetCommitByID.
func (mr *MockIRepositoryMockRecorder) GetCommitByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitByID", reflect.TypeOf((*MockIRepository)(nil).GetCommitByID), arg0, arg1)
}

// GetCommitsByRepoName mocks base method.
func (m *MockIRepository) GetCommitsByRepoName(arg0 context.Context, arg1 string, arg2 int) ([]model.CommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitsByRepoName", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.CommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitsByRepoName indicates an expected call of GetCommitsByRepoName.
func (mr *MockIRepositoryMockRecorder) GetCommitsByRepoName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitsByRepoName", reflect.TypeOf((*MockIRepository)(nil).GetCommitsByRepoName), arg0, arg1, arg2)
}

// GetLastCommit mocks base method.
func (m *MockIRepository) GetLastCommit(arg0 context.Context, arg1 string) (*model.CommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCommit", arg0, arg1)
	ret0, _ := ret[0].(*model.CommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCommit indicates an expected call of GetLastCommit.
func (mr *MockIRepositoryMockRecorder) GetLastCommit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCommit", reflect.TypeOf((*MockIRepository)(nil).GetLastCommit), arg0, arg1)
}

// GetRepoByID mocks base method.
func (m *MockIRepository) GetRepoByID(arg0 context.Context, arg1 string) (*model.RepoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoByID", arg0, arg1)
	ret0, _ := ret[0].(*model.RepoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoByID indicates an expected call of GetRepoByID.
func (mr *MockIRepositoryMockRecorder) GetRepoByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoByID", reflect.TypeOf((*MockIRepository)(nil).GetRepoByID), arg0, arg1)
}

// GetRepoByName mocks base method.
func (m *MockIRepository) GetRepoByName(arg0 context.Context, arg1 string) (*model.RepoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoByName", arg0, arg1)
	ret0, _ := ret[0].(*model.RepoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoByName indicates an expected call of GetRepoByName.
func (mr *MockIRepositoryMockRecorder) GetRepoByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoByName", reflect.TypeOf((*MockIRepository)(nil).GetRepoByName), arg0, arg1)
}

// GetReposByLanguage mocks base method.
func (m *MockIRepository) GetReposByLanguage(arg0 context.Context, arg1 string, arg2 int) ([]model.RepoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReposByLanguage", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.RepoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReposByLanguage indicates an expected call of GetReposByLanguage.
func (mr *MockIRepositoryMockRecorder) GetReposByLanguage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReposByLanguage", reflect.TypeOf((*MockIRepository)(nil).GetReposByLanguage), arg0, arg1, arg2)
}

// GetReposByStarCount mocks base method.
func (m *MockIRepository) GetReposByStarCount(arg0 context.Context, arg1 int) ([]model.RepoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReposByStarCount", arg0, arg1)
	ret0, _ := ret[0].([]model.RepoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReposByStarCount indicates an expected call of GetReposByStarCount.
func (mr *MockIRepositoryMockRecorder) GetReposByStarCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReposByStarCount", reflect.TypeOf((*MockIRepository)(nil).GetReposByStarCount), arg0, arg1)
}

// GetTopCommitsAuthorsByCount mocks base method.
func (m *MockIRepository) GetTopCommitsAuthorsByCount(arg0 context.Context, arg1 string, arg2 int) ([]model.AuthorCommits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopCommitsAuthorsByCount", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.AuthorCommits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopCommitsAuthorsByCount indicates an expected call of GetTopCommitsAuthorsByCount.
func (mr *MockIRepositoryMockRecorder) GetTopCommitsAuthorsByCount(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopCommitsAuthorsByCount", reflect.TypeOf((*MockIRepository)(nil).GetTopCommitsAuthorsByCount), arg0, arg1, arg2)
}

// SaveCommit mocks base method.
func (m *MockIRepository) SaveCommit(arg0 context.Context, arg1 *model.CommitInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCommit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCommit indicates an expected call of SaveCommit.
func (mr *MockIRepositoryMockRecorder) SaveCommit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCommit", reflect.TypeOf((*MockIRepository)(nil).SaveCommit), arg0, arg1)
}

// SaveCommits mocks base method.
func (m *MockIRepository) SaveCommits(arg0 context.Context, arg1 []model.CommitInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCommits", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCommits indicates an expected call of SaveCommits.
func (mr *MockIRepositoryMockRecorder) SaveCommits(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCommits", reflect.TypeOf((*MockIRepository)(nil).SaveCommits), arg0, arg1)
}

// SaveRepo mocks base method.
func (m *MockIRepository) SaveRepo(arg0 context.Context, arg1 *model.RepoInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRepo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRepo indicates an expected call of SaveRepo.
func (mr *MockIRepositoryMockRecorder) SaveRepo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRepo", reflect.TypeOf((*MockIRepository)(nil).SaveRepo), arg0, arg1)
}
